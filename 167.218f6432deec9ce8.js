"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[167],{7167:(e,t,n)=>{n.r(t),n.d(t,{default:()=>j});var a=n(8267),s=n(9682),o=n(8599),i=n(6362),r=n(5196);const u={version:"0.1.0",name:"farming",instructions:[{name:"close",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"farming",isMut:!0,isSigner:!1}],args:[]},{name:"decrement",accounts:[{name:"farming",isMut:!0,isSigner:!1}],args:[]},{name:"increment",accounts:[{name:"farming",isMut:!0,isSigner:!1}],args:[]},{name:"initialize",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"farming",isMut:!0,isSigner:!0},{name:"systemProgram",isMut:!1,isSigner:!1}],args:[]},{name:"set",accounts:[{name:"farming",isMut:!0,isSigner:!1}],args:[{name:"value",type:"u8"}]},{name:"chargeReward",docs:["Charge Reward"],accounts:[{name:"pool",isMut:!0,isSigner:!1},{name:"signer",isMut:!1,isSigner:!0}],args:[{name:"chargeAmount",type:"u64"}]},{name:"remainingReward",docs:["Get Total Reward remaining in Pool"],accounts:[{name:"pool",isMut:!1,isSigner:!1},{name:"signer",isMut:!1,isSigner:!0}],args:[],returns:"u64"},{name:"initializePool",docs:["Initializes a new pool. Able to create pool with single reward by passing the same Mint account for reward_a_mint and reward_a_mint"],accounts:[{name:"pool",isMut:!0,isSigner:!1,docs:["Global accounts for the staking instance."]},{name:"stakingMint",isMut:!1,isSigner:!1,docs:["Staking mint"]},{name:"stakingVault",isMut:!0,isSigner:!1,docs:["Staking vault PDA"]},{name:"rewardAMint",isMut:!1,isSigner:!1,docs:["Reward A mint"]},{name:"rewardAVault",isMut:!0,isSigner:!1,docs:["Reward A vault PDA"]},{name:"authority",isMut:!0,isSigner:!0,docs:["Authority of the pool"]},{name:"base",isMut:!1,isSigner:!0,docs:["Base"]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["System program"]},{name:"tokenProgram",isMut:!1,isSigner:!1,docs:["SPL Token program"]},{name:"rent",isMut:!1,isSigner:!1,docs:["Rent"]}],args:[{name:"rewardDuration",type:"u64"}]},{name:"createUser",docs:["Initialize a user staking account"],accounts:[{name:"pool",isMut:!0,isSigner:!1,docs:["Global accounts for the staking instance."]},{name:"user",isMut:!0,isSigner:!1,docs:["User"]},{name:"owner",isMut:!0,isSigner:!0,docs:["Authority of user account"]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["Misc."]}],args:[]},{name:"pause",docs:["Pause the pool"],accounts:[{name:"pool",isMut:!0,isSigner:!1,docs:["Global accounts for the staking instance."]},{name:"authority",isMut:!1,isSigner:!0,docs:["Authority of the pool"]}],args:[]},{name:"unpause",docs:["Unpauses a previously paused pool. Allowing for funding."],accounts:[{name:"pool",isMut:!0,isSigner:!1,docs:["Global accounts for the staking instance."]},{name:"authority",isMut:!1,isSigner:!0,docs:["Authority of the pool"]}],args:[]},{name:"deposit",docs:["User deposit tokens in the pool."],accounts:[{name:"pool",isMut:!0,isSigner:!1,docs:["Global accounts for the deposit/withdraw instance."]},{name:"stakingVault",isMut:!0,isSigner:!1,docs:["Staking vault PDA."]},{name:"user",isMut:!0,isSigner:!1,docs:["User."]},{name:"owner",isMut:!1,isSigner:!0,docs:["Authority of user"]},{name:"stakeFromAccount",isMut:!0,isSigner:!1,docs:["User staking ATA"]},{name:"tokenProgram",isMut:!1,isSigner:!1,docs:["Misc."]}],args:[{name:"amount",type:"u64"}]},{name:"withdraw",docs:["User withdraw tokens in the pool."],accounts:[{name:"pool",isMut:!0,isSigner:!1,docs:["Global accounts for the deposit/withdraw instance."]},{name:"stakingVault",isMut:!0,isSigner:!1,docs:["Staking vault PDA."]},{name:"user",isMut:!0,isSigner:!1,docs:["User."]},{name:"owner",isMut:!1,isSigner:!0,docs:["Authority of user"]},{name:"stakeFromAccount",isMut:!0,isSigner:!1,docs:["User staking ATA"]},{name:"tokenProgram",isMut:!1,isSigner:!1,docs:["Misc."]}],args:[{name:"sptAmount",type:"u64"}]},{name:"authorizeFunder",docs:["Authorize additional funders for the pool"],accounts:[{name:"pool",isMut:!0,isSigner:!1,docs:["Global accounts for the staking instance."]},{name:"authority",isMut:!1,isSigner:!0,docs:["Authority of the pool"]}],args:[{name:"funderToAdd",type:"publicKey"}]},{name:"deauthorizeFunder",docs:["Deauthorize funders for the pool"],accounts:[{name:"pool",isMut:!0,isSigner:!1,docs:["Global accounts for the staking instance."]},{name:"authority",isMut:!1,isSigner:!0,docs:["Authority of the pool"]}],args:[{name:"funderToRemove",type:"publicKey"}]},{name:"fund",docs:["Fund the pool with rewards.  This resets the clock on the end date, pushing it out to the set duration. And, linearly redistributes remaining rewards."],accounts:[{name:"pool",isMut:!0,isSigner:!1,docs:["Global accounts for the staking instance."]},{name:"stakingVault",isMut:!0,isSigner:!1,docs:["Staking vault PDA"]},{name:"rewardAVault",isMut:!0,isSigner:!1,docs:["Reward A Vault PDA"]},{name:"funder",isMut:!1,isSigner:!0,docs:["Reward B Vault PDA","Funder"]},{name:"fromA",isMut:!0,isSigner:!1,docs:["Funder reward A ATA"]},{name:"tokenProgram",isMut:!1,isSigner:!1,docs:["Funder reward B ATA","Misc."]}],args:[{name:"amountA",type:"u64"}]},{name:"claim",docs:["User claim rewards"],accounts:[{name:"pool",isMut:!0,isSigner:!1,docs:["Global accounts for the staking instance."]},{name:"stakingVault",isMut:!0,isSigner:!1,docs:["Staking vault PDA."]},{name:"rewardAVault",isMut:!0,isSigner:!1,docs:["Reward A Vault PDA"]},{name:"user",isMut:!0,isSigner:!1,docs:["Reward B Vault PDA","User."]},{name:"owner",isMut:!1,isSigner:!0,docs:["Authority of user"]},{name:"rewardAAccount",isMut:!0,isSigner:!1,docs:["User's Reward A ATA"]},{name:"tokenProgram",isMut:!1,isSigner:!1,docs:["User's Reward B ATA"]}],args:[]},{name:"withdrawExtraToken",docs:["Withdraw token that mistakenly deposited to staking_vault"],accounts:[{name:"pool",isMut:!1,isSigner:!1,docs:["Global accounts for the staking instance."]},{name:"stakingVault",isMut:!0,isSigner:!1,docs:["Staking vault PDA"]},{name:"withdrawToAccount",isMut:!0,isSigner:!1,docs:["Token account to receive mistakenly deposited token"]},{name:"authority",isMut:!1,isSigner:!0,docs:["Authority of the staking instance"]},{name:"tokenProgram",isMut:!1,isSigner:!1,docs:["Misc."]}],args:[]},{name:"closeUser",docs:["Closes a users stake account. Validation is done to ensure this is only allowed when the user has nothing staked and no rewards pending."],accounts:[{name:"pool",isMut:!0,isSigner:!1},{name:"user",isMut:!0,isSigner:!1},{name:"owner",isMut:!0,isSigner:!0}],args:[]},{name:"migrateFarmingRate",docs:["anyone can call this"],accounts:[{name:"pool",isMut:!0,isSigner:!1}],args:[]},{name:"closePool",docs:["Closes a pool account. Only able to be done when there are no users staked."],accounts:[{name:"refundee",isMut:!0,isSigner:!1},{name:"stakingRefundee",isMut:!0,isSigner:!1},{name:"rewardARefundee",isMut:!0,isSigner:!1},{name:"pool",isMut:!0,isSigner:!1},{name:"authority",isMut:!1,isSigner:!0},{name:"stakingVault",isMut:!0,isSigner:!1},{name:"rewardAVault",isMut:!0,isSigner:!1},{name:"tokenProgram",isMut:!1,isSigner:!1}],args:[]}],accounts:[{name:"farming",type:{kind:"struct",fields:[{name:"count",type:"u8"}]}},{name:"pool",docs:["Pool account wrapper"],type:{kind:"struct",fields:[{name:"authority",docs:["Privileged account."],type:"publicKey"},{name:"paused",docs:["Paused state of the program"],type:"bool"},{name:"stakingMint",docs:["Mint of the token that can be staked."],type:"publicKey"},{name:"stakingVault",docs:["Vault to store staked tokens."],type:"publicKey"},{name:"rewardAMint",docs:["Mint of the reward A token."],type:"publicKey"},{name:"rewardAVault",docs:["Vault to store reward A tokens."],type:"publicKey"},{name:"baseKey",docs:["Mint of the reward B token.","Vault to store reward B tokens.","Base key"],type:"publicKey"},{name:"rewardDuration",docs:["The period which rewards are linearly distributed."],type:"u64"},{name:"rewardDurationEnd",docs:["The timestamp at which the current reward period ends."],type:"u64"},{name:"lastUpdateTime",docs:["The last time reward states were updated."],type:"u64"},{name:"rewardARate",docs:["deprecated field"],type:"u64"},{name:"rewardAPerTokenStored",docs:["deprecated field","Last calculated reward A per pool token."],type:"u128"},{name:"userStakeCount",docs:["Last calculated reward B per pool token.","Users staked"],type:"u32"},{name:"funders",docs:["authorized funders","[] because short size, fixed account size, and ease of use on","client due to auto generated account size property"],type:{array:["publicKey",3]}},{name:"rewardARateU128",docs:["reward_a_rate in u128 form"],type:"u128"},{name:"poolBump",docs:["reward_b_rate in u128 form","Pool bump"],type:"u8"},{name:"totalStaked",docs:["Total staked amount"],type:"u64"},{name:"totalReward",type:"u64"}]}},{name:"user",docs:["Farming user account"],type:{kind:"struct",fields:[{name:"pool",docs:["Pool the this user belongs to."],type:"publicKey"},{name:"owner",docs:["The owner of this account."],type:"publicKey"},{name:"rewardAPerTokenComplete",docs:["The amount of token A claimed."],type:"u128"},{name:"rewardAPerTokenPending",docs:["The amount of token B claimed.","The amount of token A pending claim."],type:"u64"},{name:"balanceStaked",docs:["The amount of token B pending claim.","The amount staked."],type:"u64"},{name:"nonce",docs:["Signer nonce."],type:"u8"}]}}],events:[{name:"EventDeposit",fields:[{name:"amount",type:"u64",index:!1}]},{name:"EventWithdraw",fields:[{name:"amount",type:"u64",index:!1}]},{name:"EventFund",fields:[{name:"amountA",type:"u64",index:!1}]},{name:"EventClaim",fields:[{name:"amountA",type:"u64",index:!1}]},{name:"EventAuthorizeFunder",fields:[{name:"newFunder",type:"publicKey",index:!1}]},{name:"EventUnauthorizeFunder",fields:[{name:"funder",type:"publicKey",index:!1}]}],errors:[{code:6e3,name:"InsufficientFundWithdraw",msg:"Insufficient funds to withdraw."},{code:6001,name:"AmountMustBeGreaterThanZero",msg:"Amount must be greater than zero."},{code:6002,name:"SingleDepositTokenBCannotBeFunded",msg:"Reward B cannot be funded - pool is single deposit."},{code:6003,name:"PoolPaused",msg:"Pool is paused."},{code:6004,name:"DurationTooShort",msg:"Duration cannot be shorter than one day."},{code:6005,name:"FunderAlreadyAuthorized",msg:"Provided funder is already authorized to fund."},{code:6006,name:"MaxFunders",msg:"Maximum funders already authorized."},{code:6007,name:"CannotDeauthorizePoolAuthority",msg:"Cannot deauthorize the primary pool authority."},{code:6008,name:"CannotDeauthorizeMissingAuthority",msg:"Authority not found for deauthorization."},{code:6009,name:"MathOverflow",msg:"Math operation overflow"}]},c=new r.PublicKey("EmYtxFw6VXgVtKfFdKi8oN8Qm9ZY5KWNTDSwbaELW1ka");var l=n(1638),d=n(3530),m=n(7073),g=n(514),p=n(3696),h=n(6824),y=n(6231);const w=new l.BN(10);async function f(e,t,n,a,s){return l.SX.PublicKey.findProgramAddressSync([s?s.toBuffer(null,8):w.toBuffer(null,8),t.toBuffer(),n.toBuffer(),a.toBuffer()],e.programId)}async function b(e,t,n){return l.SX.PublicKey.findProgramAddressSync([n.toBuffer(),t.toBuffer()],e.programId)}var k=n(5604),x=n(7876);function S(){const e=new l.BN(100),{connection:t}=(0,d.w)(),{cluster:n}=(0,y.Gx)(),a=(0,o.hx)(),i=(0,s.is)(),w=(0,p.useMemo)((()=>(n.network,c)),[n]),S=new l.BP(u,w,i),A=(0,m.I)({queryKey:["farming","all",{cluster:n}],queryFn:()=>S.account.farming.all()}),M=(0,m.I)({queryKey:["get-program-account",{cluster:n}],queryFn:()=>t.getParsedAccountInfo(w)}),v=(0,m.I)({queryKey:["Farming","get-pools",{cluster:n}],queryFn:()=>S.account.pool.all()}),P=(0,m.I)({queryKey:["Farming","deployer",{cluster:n}],queryFn:()=>{if("EFevPkhBtapw59vZEq3CfgbnBrPqkyPVqUSx6j59HAnd"==i.wallet.publicKey.toString())return!0}}),K=(0,g.n)({mutationKey:["farming","initialize",{cluster:n}],mutationFn:e=>S.methods.initialize().accounts({farming:e.publicKey}).signers([e]).rpc(),onSuccess:e=>(a(e),A.refetch()),onError:()=>h.Ay.error("Failed to initialize account")}),j=(0,g.n)({mutationKey:["farming","initialize-pool",{cluster:n}],mutationFn:async({stakingMintStr:t,rewardAMintStr:n})=>{const s=new r.PublicKey(t),o=new r.PublicKey(n),[u,c]=await f(S,s,o,i.wallet.publicKey,e),[d,m]=await async function(e,t,n,a,s){const[o,i]=await f(e,t,n,a,s);return l.SX.PublicKey.findProgramAddressSync([Buffer.from("staking"),o.toBuffer()],e.programId)}(S,s,o,i.wallet.publicKey,e),[g,p]=await async function(e,t,n,a,s){const[o,i]=await f(e,t,n,a,s);return l.SX.PublicKey.findProgramAddressSync([Buffer.from("reward_a"),o.toBuffer()],e.programId)}(S,s,o,i.wallet.publicKey,e);S.methods.initializePool(e).accounts({authority:i.wallet.publicKey,base:i.wallet.publicKey,pool:u,rent:l.SX.SYSVAR_RENT_PUBKEY,rewardAMint:o,rewardAVault:g,stakingMint:s,stakingVault:d,systemProgram:l.SX.SystemProgram.programId,tokenProgram:k.x5}).rpc().then((e=>e)).catch((e=>{a("Already existing pool!")}))},onSuccess:e=>(a("Success"),v.refetch()),onError:()=>{a("Error")}}),F=(0,g.n)({mutationKey:["Farming","all-pools",{cluster:n}],mutationFn:async()=>S.account.pool.all(),onSuccess:e=>{},onError:()=>{}}),N=(0,g.n)({mutationKey:["Farming","create-user",{cluster:n}],mutationFn:async({stakingMintStr:t,rewardAMintStr:n})=>{const a=new r.PublicKey(t),s=new r.PublicKey(n),[o,u]=await f(S,a,s,i.wallet.publicKey,e),[c,l]=await b(S,o,i.wallet.publicKey)},onSuccess:e=>{},onError:()=>{}}),T=(0,g.n)({mutationKey:["Farming","deposit",{cluster:n}],mutationFn:async({pool:e,amount:t,userTAstr:n})=>{const a=new l.BN(t),s=new r.PublicKey(n),o=e,[u,c]=await b(S,o,i.wallet.publicKey),d=await S.account.pool.fetch(o);await S.account.user.fetch(u).then((async e=>await S.methods.deposit(a).accounts({owner:i.wallet.publicKey,pool:o,stakeFromAccount:s,stakingVault:d.stakingVault,tokenProgram:k.x5,user:u}).rpc())).catch((async e=>{await S.methods.createUser().accounts({owner:i.wallet.publicKey,pool:o,systemProgram:l.SX.SystemProgram.programId,user:u}).rpc(),await setTimeout((()=>{}),2e3);return await S.methods.deposit(a).accounts({owner:i.wallet.publicKey,pool:o,stakeFromAccount:s,stakingVault:d.stakingVault,tokenProgram:k.x5,user:u}).rpc()}))},onSuccess:e=>(a("Success"),e),onError:()=>{}}),B=(0,g.n)({mutationKey:["Farming","withdraw",{cluster:n}],mutationFn:async({pool:e,amount:t,userTAstr:n})=>{const a=new l.BN(t),s=new r.PublicKey(n),o=e,[u,c]=await b(S,o,i.wallet.publicKey),d=await S.account.pool.fetch(o);await S.account.user.fetch(u).then((async e=>await S.methods.withdraw(a).accounts({owner:i.wallet.publicKey,pool:o,stakeFromAccount:s,stakingVault:d.stakingVault,tokenProgram:k.x5,user:u}).rpc())).catch((async e=>{await S.methods.createUser().accounts({owner:i.wallet.publicKey,pool:o,systemProgram:l.SX.SystemProgram.programId,user:u}).rpc()}))},onSuccess:e=>(a("Success"),e),onError:()=>{}}),V=(0,g.n)({mutationKey:["Farming","claim",{cluster:n}],mutationFn:async({pool:e})=>{const t=e,n=await S.account.pool.fetch(t),[a,s]=await b(S,t,i.wallet.publicKey),o=(0,x.Xt)(n.rewardAMint,i.wallet.publicKey,!0,k.x5,k.EK);i.connection.getTokenAccountBalance(o).then((e=>{console.log(e)})).catch((e=>{}));return await S.methods.claim().accounts({owner:i.wallet.publicKey,pool:t,rewardAAccount:o,rewardAVault:n.rewardAVault,stakingVault:n.stakingVault,tokenProgram:k.x5,user:a}).rpc()},onSuccess:e=>{a(e)}}),z=(0,m.I)({queryKey:["Farming","user-token-accounts",{cluster:n}],queryFn:async()=>await i.connection.getParsedTokenAccountsByOwner(i.wallet.publicKey,{programId:k.x5})}),R=(0,g.n)({mutationKey:["Farming","user-token-balance",{cluster:n}],mutationFn:async e=>await i.connection.getTokenAccountBalance(e),onSuccess:async e=>e}),_=((0,g.n)({mutationKey:["Farming","user-pda",{cluster:n}],mutationFn:async({pool:e})=>{const t=new r.PublicKey(e),[n,a]=await b(S,t,i.wallet.publicKey);return n},onSuccess:()=>{},onError:()=>{}}),(0,g.n)({mutationKey:["Farming","user-staked",{cluster:n}],mutationFn:async({pool:e})=>{const t=e,[n,a]=await b(S,t,i.wallet.publicKey);return S.account.user.fetch(n).then((e=>e)).catch((e=>{}))},onSuccess:e=>e}));return{program:S,programId:w,accounts:A,getProgramAccount:M,initialize:K,initialize_pool:j,get_pools:F,allPools:v,create_user:N,deposit:T,withdraw:B,user_token_accounts:z,token_balance:R,user_staked:_,claim:V,deployer:P}}var A=n(2540);function M(){const[e,t]=(0,p.useState)([]),{initialize:n,initialize_pool:a,get_pools:s,allPools:o,user_token_accounts:i,deployer:r}=S();return(0,A.jsx)(A.Fragment,{children:(0,A.jsx)("div",{className:"flex justify-around"})})}function v(){var e,t;const{accounts:n,getProgramAccount:a,allPools:s,user_token_accounts:o,deployer:i}=S();return a.isLoading?(0,A.jsx)("span",{className:"loading loading-spinner loading-lg"}):null!=(e=a.data)&&e.value?(0,A.jsxs)("div",{className:"space-y-6",children:[s.isLoading?(0,A.jsx)(A.Fragment,{}):(0,A.jsx)(A.Fragment,{children:o.isLoading?(0,A.jsx)(A.Fragment,{}):(0,A.jsx)(A.Fragment,{children:null==(t=s.data)?void 0:t.map(((e,t)=>{var n;const a=null==(n=o.data)?void 0:n.value.find((t=>{var n;return(null==(n=t.account.data)||null==(n=n.parsed)||null==(n=n.info)?void 0:n.mint)==e.account.stakingMint.toString()}));return(0,A.jsx)(P,{account:e,ta:a},t)}))})}),!i.isLoading&&i.data&&(0,A.jsx)(K,{})]}):(0,A.jsx)("div",{className:"alert alert-info flex justify-center",children:(0,A.jsx)("span",{children:"Program account not found. Make sure you have deployed the program and are on the correct cluster."})})}function P({account:e,ta:t}){const{create_user:n,deposit:a,token_balance:s,user_staked:o,withdraw:i,claim:r}=S(),u=(0,p.useRef)(null),c=(0,p.useRef)(null),[l,d]=(0,p.useState)("0.00"),[m,g]=(0,p.useState)("0.00"),[h,y]=(0,p.useState)(null),[w,f]=(0,p.useState)(0);(0,p.useEffect)((()=>{t&&s.mutateAsync(t.pubkey).then((e=>{d(e.value.amount)}))}),[t]),(0,p.useEffect)((()=>{e&&o.mutateAsync({pool:e.publicKey}).then((t=>{g(null==t?void 0:t.balanceStaked.toString()),console.log(e,t);const n=e.account.lastUpdateTime.toNumber(),a=Date.now()/1e3-n,s=21e5*(null==t?void 0:t.balanceStaked.toNumber())*a/(31536e3*e.account.totalStaked.toNumber());console.log(s),f(s),y(t)}))}),[e]);return(0,A.jsx)(A.Fragment,{children:(0,A.jsxs)("div",{className:"rounded w-full shadow-md px-5 py-5",children:[(0,A.jsxs)("div",{children:[(0,A.jsxs)("p",{className:"text-xl",children:["Token : ",e.account.stakingMint.toString()]}),(0,A.jsxs)("p",{className:"text-xl",children:["Reward : ",e.account.rewardAMint.toString()]})]}),t?(0,A.jsx)(A.Fragment,{children:(0,A.jsxs)("div",{className:"grid grid-cols-3 gap-4",children:[(0,A.jsxs)("div",{children:[(0,A.jsx)("div",{className:"mt-2",children:(0,A.jsxs)("div",{className:"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 sm:max-w-md",children:[(0,A.jsx)("span",{className:"flex select-none items-center pl-3 text-gray-500 sm:text-sm",children:"Amount"}),(0,A.jsx)("input",{type:"number",ref:u,name:"deposit-amount",id:"deposit-amount",autoComplete:"deposit-amount",className:"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6",placeholder:""})]})}),(0,A.jsxs)("label",{htmlFor:"deposit",className:"block text-sm font-medium leading-6 text-gray-900",children:["Your Balance : ",l]}),(0,A.jsx)("button",{type:"button",onClick:n=>{return r=null==u||null==(i=u.current)?void 0:i.value,e.account.stakingMint,e.account.rewardAMint,void(r&&a.mutateAsync({userTAstr:t.pubkey.toString(),pool:e.publicKey,amount:Number(r)}).then((()=>{s.mutateAsync(t.pubkey).then((e=>{d(e.value.amount)})),o.mutateAsync({pool:e.publicKey}).then((e=>{g(null==e?void 0:e.balanceStaked.toString()),y(e)}))})));var i,r},className:"rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600",children:"Deposit"})]}),(0,A.jsxs)("div",{children:[(0,A.jsx)("div",{className:"mt-2",children:(0,A.jsxs)("div",{className:"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 sm:max-w-md",children:[(0,A.jsx)("span",{className:"flex select-none items-center pl-3 text-gray-500 sm:text-sm",children:"Amount"}),(0,A.jsx)("input",{type:"number",ref:c,name:"withdraw-amount",id:"withdraw-amount",autoComplete:"withdraw-amount",className:"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6",placeholder:""})]})}),(0,A.jsxs)("label",{htmlFor:"withdraw",className:"block text-sm font-medium leading-6 text-gray-900",children:["Your Staked : ",m]}),(0,A.jsx)("button",{type:"button",onClick:n=>{var a,r;(r=null==c||null==(a=c.current)?void 0:a.value)&&i.mutateAsync({userTAstr:t.pubkey.toString(),pool:e.publicKey,amount:Number(r)}).then((()=>{s.mutateAsync(t.pubkey).then((e=>{d(e.value.uiAmountString)})),o.mutateAsync({pool:e.publicKey}).then((e=>{g(null==e?void 0:e.balanceStaked.toString()),y(e)}))}))},disabled:"0.00"==m,className:"rounded-md bg-pink-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600",children:"Withdraw"})]}),(0,A.jsxs)("div",{children:[(0,A.jsx)("div",{className:"mt-2"}),(0,A.jsxs)("label",{htmlFor:"username",className:"block text-sm font-medium leading-6 text-gray-900",children:["Your Reward : ",w]}),(0,A.jsx)("button",{type:"button",onClick:t=>{r.mutateAsync({pool:e.publicKey})},className:"rounded-md bg-green-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600",children:"Claim"})]})]})}):(0,A.jsx)(A.Fragment,{children:(0,A.jsx)("p",{className:"text-4xl",children:"You have not token"})})]})})}const K=()=>{const{initialize_pool:e}=S(),t=(0,p.useRef)(null),n=(0,p.useRef)(null);return(0,A.jsxs)("div",{className:"rounded w-full shadow-md px-5 py-5",children:[(0,A.jsx)("div",{children:(0,A.jsx)("p",{className:"text-xl",children:"Create Pool"})}),(0,A.jsxs)("div",{className:"grid grid-cols-2 gap-4",children:[(0,A.jsxs)("div",{children:[(0,A.jsx)("label",{htmlFor:"deposit",className:"block text-sm font-medium leading-6 text-gray-900",children:"Token address : "}),(0,A.jsx)("div",{className:"mt-2",children:(0,A.jsx)("div",{className:"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 sm:max-w-md",children:(0,A.jsx)("input",{ref:t,type:"text",name:"deposit-amount",id:"deposit-amount",autoComplete:"deposit-amount",className:"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6",placeholder:""})})})]}),(0,A.jsxs)("div",{children:[(0,A.jsx)("label",{htmlFor:"withdraw",className:"block text-sm font-medium leading-6 text-gray-900",children:"Reward token address "}),(0,A.jsx)("div",{className:"mt-2",children:(0,A.jsx)("div",{className:"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 sm:max-w-md",children:(0,A.jsx)("input",{ref:n,type:"text",name:"withdraw-amount",id:"withdraw-amount",autoComplete:"withdraw-amount",className:"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6",placeholder:""})})})]})]}),(0,A.jsx)("div",{className:"mt-2",children:(0,A.jsx)("button",{type:"button",onClick:a=>(()=>{var a,s;const o=null==t||null==(a=t.current)?void 0:a.value,i=null==n||null==(s=n.current)?void 0:s.value;o&&i&&e.mutateAsync({stakingMintStr:o,rewardAMintStr:i})})(),className:"rounded-md bg-green-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600",children:"Initialize"})})]})};function j(){const{publicKey:e}=(0,a.v)(),{programId:t}=S();return e?(0,A.jsxs)("div",{children:[(0,A.jsxs)(o.sR,{title:"Farming",subtitle:'Create a new account by clicking the "Create" button. The state of a account is stored on-chain and can be manipulated by calling the program\'s methods (increment, decrement, set, and close).',children:[(0,A.jsx)("p",{className:"mb-6",children:(0,A.jsx)(i.wq,{path:`account/${t}`,label:(0,o.qq)(t.toString())})}),(0,A.jsx)(M,{})]}),(0,A.jsx)(v,{})]}):(0,A.jsx)("div",{className:"max-w-4xl mx-auto",children:(0,A.jsx)("div",{className:"hero py-[64px]",children:(0,A.jsx)("div",{className:"hero-content text-center",children:(0,A.jsx)(s.U3,{})})})})}}}]);